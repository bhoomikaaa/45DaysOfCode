https://leetcode.com/problems/sort-colors/description/

Approach 1 - Storing frequency of 0 1 and 2 and storing the values at their right places.

T(C) - O(N) for storing frequencies + O(N) for placing values = O(N)

void sortColors(vector<int>& nums) {
        int n= nums.size();
        int czero, cone,ctwo=0;
        for(int i=0;i<n;i++){
            if(nums[i]== 0)
            czero++;
            else if(nums[i] ==1)
            cone++;
            else
            ctwo++;
        }
        int i=0;
        while(czero!=0){
            nums[i]=0;
            i++;
            czero--;
        }
        while(cone!=0){
            nums[i]=1;
            i++;
            cone--;
        }
        while(ctwo!=0){
            nums[i]=2;
            i++;
            ctwo--;
        }
        }
        
        Approach 2 - Using three pointers
        
        T(C)- O(N)
        
        void sortColors(vector<int>& nums) {
        int low = 0, mid = 0, high = nums.size() - 1;
        
        // logic:
        while(mid <= high)
        {
            switch(nums[mid])
            {
                case 0: swap(nums[low++], nums[mid++]); break;
                
                case 1: mid++; break;
                
                case 2: swap(nums[mid], nums[high--]); break;
            }
        }
    }


        
    
