https://leetcode.com/problems/majority-element


Apporach 1 Using two nested loops(brute force)
T(C)-O(n^2) S(C)-O(1)
 int majorityElement(vector<int>& nums) {
        int n=nums.size();
        for(int i=0;i<n;i++){
            int ele =nums[i];
            int count =0;
            for(int j=0;j<n;j++){
                if(nums[j]==ele)
                    count++;
            }
            if(count>n/2)
                return nums[i];
        }
        return -1;
        
    }
    
     Approach 2 -Using Sorting
     T(C)-O(nlogn) S(C)- O(n) Merge sort
     
     int majorityElement(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        int i=1,count=1;
        while(i<n){
            while(i<n && nums[i]==nums[i-1]){
                i=i+1;
                count=count+1;
            }
            if(count>n/2)
                return nums[i-1];
            count=1;
            i=i+1;
            
        }
        return -1;
        
    }
    
    
    Approach 3 Using hash table
    T(C)-O(n) S(c)-O(n)
    
     int majorityElement(vector<int>& nums) {
        int n=nums.size();
        unordered_map<int,int> frequency;
        for(int i : nums){
            frequency[i]++;
            if(frequency[i]>n/2)
                return i;
        }
        return -1;
        
    }
    
    Approach 4 Using Boyer-Moore Majority vote algo
    T(C)-O(n) S(c)- O(n)
    
     int majorityElement(vector<int>& nums) {
        int count =0;
        int candidate=0;
        for(int i:nums){
            if(count == 0){
                candidate=i;
            }
        
        if(i==candidate)
            count++;
        else
            count--;
        }
        return candidate;
        
    }
    
    
