 https://leetcode.com/problems/valid-parentheses/
 
 bool isValid(string s) {
        
        stack<char> st;
        for(auto c : s){
            if(st.empty())
                st.push(c);
            
            
            
            
            
            else if( (st.top() == '(' &&  c == ')') || 
                    (st.top() == '[' &&  c == ']') 
                    || (st.top() == '{' &&  c == '}')
                   )
            {
                st.pop();
            }
            
            else
                st.push(c);
        }
        if(st.size()==0)
            return true;
        
        return false;
        
    }
    
    
    https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/
    
    Approach 1 Using stack
    
    string removeDuplicates(string s) {
        int n = s.size(), i=0;
        string ans= "";
        stack<char>st;
        while(i<n){
            if(st.empty() ||  st.top()!=s[i])
                st.push(s[i]);
            else
                st.pop();
            i++;
        }
        while(!st.empty()){
            char ele =st.top();
            st.pop();
            ans+=ele;
            
        }
        reverse(ans.begin(),ans.end());
        return ans;
        
    }
    
    Approach 2 
    string removeDuplicates(string s) {
        string ans = "";
        for(int i=0;i<s.size();i++){
            if(ans.size()>0 && ans.back()==s[i])
                ans.pop_back();
            else
                ans.push_back(s[i]);
        }
        return ans;
        
    } 
