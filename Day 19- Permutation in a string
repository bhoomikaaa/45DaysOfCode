https://leetcode.com/problems/permutation-in-string/submissions/842750103/

Approach - We are creating two hashes for storing the frequency of all 26 characters in string s1 and s2. Then for every window of size s1, we are traversing through s2 and checking 
if the frequency of characters in that window are same in both the hashes. if yes , they are permutation and we return true, if not, we slide the window through right.

T(C) - O( 26*len(s2))

bool checkInclusion(string s1, string s2) {
        vector<int> s1hash(26,0);
        vector<int> s2hash(26,0);
        int s1len = s1.size();
        int s2len = s2.size();
        if( s1len > s2len) // if len of s1 is greater than s2 , it cannot be present in s2 as an anagram(permutation)
        return false;

        int l,r=0;
        while( r< s1len){ // creating the first windwo of len s1
            s1hash[s1[r]-'a']++; // storing the frequency of s1 string characters
            s2hash[s2[r]-'a']++; // storing the frequency of s2 string characters within the window
            r++;
        }
        r--; // to bring r pointer back to end of window 
        while(r< s2len){ // traversing s2
            if(s1hash == s2hash)
            return true;
            r++; // sliding window to right
            if(r != s2len)
             s2hash[s2[r]-'a']++; // add the frequency of character to right which is being included
              s2hash[s2[l]-'a']--; // removing a frequency of ch to left which is being excluded
              l++; // sliding from left
            

        }
        return false;
        
    }
